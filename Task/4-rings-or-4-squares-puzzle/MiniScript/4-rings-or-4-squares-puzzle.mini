combinations = function(elements, comboLength, unique=true)
	n = elements.len
	if comboLength > n then return []
	
	allCombos = []
	
	genCombos=function(start, currCombo)
		if currCombo.len == comboLength then
			allCombos.push(currCombo)
			return
		end if
		if start == n then return
		for i in range(start, n - 1)
			newCombo = currCombo + [elements[i]]
			genCombos(i + unique, newCombo)
		end for
	end function
	
	genCombos(0, [])
	return allCombos
end function

permutations = function(elements, permLength=null)
	n = elements.len
	elements.sort
	if permLength == null then permLength = n
	
	allPerms = []
	
	genPerms = function(prefix, remainingElements)
		if prefix.len == permLength then
			allPerms.push(prefix)
			return
		end if
		
		for i in range(0, remainingElements.len - 1)
			if i > 0 and remainingElements[i] == remainingElements[i-1] then continue
			newPrefix = prefix + [remainingElements[i]]
			newRemains = remainingElements[:i] + remainingElements[i+1:]
			genPerms(newPrefix, newRemains)
		end for
	end function
	genPerms([],elements)
	return allPerms
end function

ringsEqual = function(a)
	if a.len != 7 then return false
	return a[0]+a[1] == a[1]+a[2]+a[3] == a[3]+a[4]+a[5] == a[5] + a[6]
end function

fourRings = function(lo, hi, unique, show)
	rng = range(lo, hi)
	combos = combinations(rng, 7, unique)
	cnt = 0
	for c in combos
		for p in permutations(c)
			if ringsEqual(p) then
				cnt += 1
				if show then print p.join(", ")
			end if
		end for
	end for
	uniStr = [" nonunique", " unique"]
	print cnt + uniStr[unique] + " solutions for " + lo + " to " + hi
	print
end function

fourRings(1, 7, true, true)
fourRings(3, 9, true, true)
fourRings(0, 9, false, false)
