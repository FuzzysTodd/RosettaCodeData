#!/usr/bin/env ys-0

# This program has multiple implementations of "fizzbuzz".

# usage: ys fizzbuzz.ys [<count>] [<fizzbuzz-fn-#>]

# The main function runs a certain requested fizzbuzz implementation function
# for a certain requested number (default is 100).

defn main(&[count impl]):
  count =: count || 100
  impl =:
    str: impl || "1"
  fizzbuzz =: "fizzbuzz-$impl"

  when-not ENV."YS_TEST":
    say: "Running function '$fizzbuzz' with count=$count"

  function =: resolve(symbol(fizzbuzz))
  result   =: function(count)

  mapv say: result


# These implementation functions were adapted from
# https://rosettacode.org/wiki/FizzBuzz#Clojure

defn fizzbuzz-1(n):
  map:
    fn [x]:
      cond:
        zero?(mod(x 15)) "FizzBuzz"
        zero?(mod(x 5))  "Buzz"
        zero?(mod(x 3))  "Fizz"
        :else            x
    =>: (1 .. n)

defn fizzbuzz-2(n):
  loop [i 1, l []]:
    if (i > n):
      =>: l
      recur:
        inc: i
        conj l:
          cond:
            zero?(mod(i 15)) "FizzBuzz"
            zero?(mod(i 5))  "Buzz"
            zero?(mod(i 3))  "Fizz"
            :else            i

defn fizzbuzz-3(n):
  map:
    fn [x]:
      s =:
        str:
          when zero?(mod(x 3)): "Fizz"
          when zero?(mod(x 5)): "Buzz"
      if empty?(s): x s
    rng: 1, n
