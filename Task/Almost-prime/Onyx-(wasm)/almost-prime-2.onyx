//+optional-semicolons
use core {printf}
use core.iter

main :: () {
    generator :=
        iter.counter(1)
        |> iter.map(k => .{
            k = k, kprimes = kprime_iter(k)->take(10)
        })
        |> iter.take(5)

    for val in generator {
        printf("k = {}:", val.k)
        for p in val.kprimes do printf(" {}", p)
        printf("\n")
    }
}

kprime_iter :: k =>
       iter.counter(2)
    |> iter.filter((i, [k]) => kprime(i, k))

kprime :: (n, k) => {
    f := 0
    for p in iter.counter(2) {
        if f >= k    do break
        if p * p > n do break

        while n % p == 0 {
            n /= p
            f += 1
        }
    }

    return f + (1 if n > 1 else 0) == k
}
