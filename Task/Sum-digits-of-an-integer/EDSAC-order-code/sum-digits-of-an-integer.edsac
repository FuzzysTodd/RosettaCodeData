[Sum of digits of a number in a given base - Rosetta Code
 EDSAC program (Initial Orders 2)]

      [Arrange the storage]
          T45K P56F       [H parameter: library subroutine R4 to read integer]
          T46K P80F       [N parameter: subroutine to print 35-bit positive integer]
          T47K P180F      [M parameter: main routine]
          T48K P120F      [& (Delta) parameter: subroutine for integer division]
          T51K P157F      [G parameter: subroutine to find sum of digits]

[Library subroutine M3, runs at load time and is then overwritten.
 Prints header; here, last character sets teleprinter to figures.]
          PF GK IF AF RD LF UF OF E@ A6F G@ E8F EZ PF
      *!!!!NUMBER!!!!!!!BASE!!!SUM!OF!DIGITS@&#..PZ

[============== G parameter: Subroutine find sum of digits ==============
 Input:  4D = non-negative number (not preserved)
         6D = base (not preserved)
 Output: 0D = sum of digits
 Workspace: 8D (in called subroutine), 10D, 12D]
          E25K TG GK
          A3F T22@        [plant return link as usual]
          A6D T10D        [store base in 10D]
          T12D            [sum of digits in 12D, initialize to 0]
          A4D             [acc := number]
          E17@            [jump into middle of loop]
       [Start of loop. Next dividend is already in 4D.]
    [7]   TF              [clear acc]
          A10D T6D        [pass base as divisor]
   [10]   A10@ G&         [call division subroutine]
          A4D A12D T12D   [remainder is next digit; add to result]
          A6D U4D         [quotient becomes next dividend]
   [17]   S10D            [is dividend >= base?]
          E7@             [if so, loop back to do division]
       [Here if dividend < base. Means that dividend = top digit.]
          A10D            [restore digit after test]
          A12D            [add to sum of digits]
          TD              [return sum of digits in 0D]
   [22]   ZF              [(planted) jump back to caller]

[====================== M parameter: Main routine ======================]
          E25K TM GK
[Load at even addess; put 35-bit values first]
    [0]   PF PF           [number]
    [2]   PF PF           [base]
    [4]   PF              [negative data count]
    [5]   !F              [space]
    [6]   @F              [carriage return]
    [7]   &F              [line feed]
    [8]   K4096F          [null character]
[Enter with acc = 0]
    [9]   A9@ GH          [call subroutine R4, sets 0D := count of (n,k) pairs]
          SF              [acc := count negated; it's assumed that count < 2^16]
          E48@            [exit if count = 0]
          LD              [shift count into address field]
   [14]   T4@             [update negative loop counter]
   [15]   A15@ GH         [call library subroutine R4, 0D := number]
          AD T#@          [store number]
   [19]   A19@ GH         [call library subroutine R4, 0D := base]
          AD T2#@         [store base]
          A#@ TD          [pass number to print subroutine]
   [25]   A25@ GN O5@     [print number, plus space]
          A2#@ TD         [pass base to print subroutine]
   [30]   A30@ GN O5@ O5@ O5@ [print base, plus spaces]
          A#@ T4D         [pass number to sum-of-digits subroutine]
          A2#@ T6D        [same for base]
   [39]   A39@ GG         [call subroutine, 0D := sum of digits]
   [41]   A41@ GN O6@ O7@ [print sum of digits, plus CR,LF]
          A4@ A2F         [increment negative counter]
          G14@            [loop back if still negative]
   [48]   O8@             [done; print null to flush printer buffer]
          ZF              [halt the machine]

[The next 3 lines put the entry address into location 50,
 so that it can be accessed via the X parameter (see end of program).]
          T50K
          P9@
          T9Z

[================== H parameter: Library subroutine R4 ==================
 Input of one signed integer, returned in 0D.
 22 locations.]
          E25K TH GK
   GKA3FT21@T4DH6@E11@P5DJFT6FVDL4FA4DTDI4FA4FS5@G7@S5@G20@SDTDT6FEF

[============================= N parameter ==============================
 Library subroutine P7, prints long strictly positive integer in 0D.
 10 characters, right justified, padded left with spaces.
 Even address; 35 storage locations; working position 4D.]
          E25K TN
    GKA3FT26@H28#@NDYFLDT4DS27@TFH8@S8@T1FV4DAFG31@SFLDUFOFFFSFL4F
    T4DA1FA27@G11@XFT28#ZPFT27ZP1024FP610D@524D!FO30@SFL8FE22@

[========================== & (Delta) parameter ==========================]
[The following subroutine is not in the EDSAC library.
 Division subroutine for positive 35-bit integers,
   returning quotient and remainder.
 Input:  dividend at 4D, divisor at 6D
 Output: remainder at 4D, quotient at 6D.
 37 locations; working locations 0D, 8D.]
          E25K T&
    GKA3FT35@A6DU8DTDA4DRDSDG13@T36@ADLDE4@T36@T6DA4DSDG23@
    T4DA6DYFYFT6DT36@A8DSDE35@T36@ADRDTDA6DLDT6DE15@EFPF

[==========================================================================]
[On the original EDSAC, the following (without the whitespace and comments)]
[might have been input on a separate tape.]
          E25K TX GK
          EZ              [define entry point]
          PF              [acc = 0 on entry]
[Count of (n,k) pairs, then the pairs, to be read by library subroutine R4.]
[Note that sign comes *after* value.]
10+1+10+1234+10+254+16+3854+16+2186+3+2187+3+123045+50+2003579+36+
123456789+1000+1234567890+100000+
