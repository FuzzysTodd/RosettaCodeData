MODULE TauNumbers;

  IMPORT Out;

  CONST
    MaxNum = 1100;
    NumTau = 100;

  VAR
    divcount: ARRAY MaxNum OF LONGINT; (* enough to generate 100 Tau numbers *)
    seen,n:LONGINT; (* how many Tau numbers to generate *)

  (* Find the amount of divisors for each number beforehand *)
  PROCEDURE CountDivisors;
    VAR i,j:LONGINT;
  BEGIN
    FOR i := 0 TO LEN(divcount)-1 DO divcount[i] := 1 END;
    FOR i := 2 TO LEN(divcount)-1 DO
      j := i;
      WHILE j <= LEN(divcount)-1 DO (* j is divisible by i *)
	    INC(divcount[j]);
	    INC(j,i) (* next multiple of i *)
      END
    END;
  END CountDivisors;

BEGIN
  CountDivisors;
  n := 1;
  seen := 0;
  WHILE seen < NumTau DO
    IF n MOD divcount[n] = 0 THEN
      Out.Int(n,5);
      INC(seen);
      IF seen MOD 10 = 0 THEN Out.Ln END
    END;
    INC(n)
  END
END TauNumbers.
