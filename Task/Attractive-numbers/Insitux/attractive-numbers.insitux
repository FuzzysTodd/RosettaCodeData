(function primes n
  (let find-range (range 2 (inc n))
       check-nums (range 2 (-> n ceil sqrt inc))
       skip-each-after #(skip-each % (skip %1 %2))
       muls (xmap #(drop 0 (skip-each-after (dec %1) % find-range)) check-nums))
  (remove (flatten muls) find-range))
(function distinct-factor n
  (filter @(div? n) (primes n)))
(function factor n
  (map (fn t (find (div? n) (map @(** t) (range (round (sqrt n)) 0)))) (distinct-factor n)))
(function decomposed-factors n
  (map (fn dist t (repeat dist (/ (logn t) (logn dist)))) (distinct-factor n) (factor n)))
(var prime? @((primes %)))

(var attract-num? (comp decomposed-factors flatten len prime?))
(filter attract-num? (range 121))
