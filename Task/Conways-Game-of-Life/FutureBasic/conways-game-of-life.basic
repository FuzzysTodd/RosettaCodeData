Short a(4, 4), c(4, 4) // Initialize arrays of cells and a working copy

void local fn seed
  Short x, y
  // Blinker
  a(1, 2) = 1 : a(2, 2) = 1 : a(3, 2) =  1
  for y = 1 to 3 : for x = 1 to 3
    print a(x, y); // Draw array
  next : print : next : print
end fn

void local fn nextGen
  Short x, y, dx, dy, n
  // Calculate next generation on temporary board
  for y = 1 to 3 : for x = 1 to 3
    c(x, y) = 0 // Initialize
    n = -a(x, y) // Don't count center cell
    for dy = -1 to 1 : for dx = -1 to 1
      n += a(x + dx, y + dy) // Count the neighbours
    next : next
    c(x, y) = ( n == 3 ) or ( n == 2 and a(x, y) ) // Conwayâ€™s rule
  next : next
  // Copy temp array to actual array and draw
  for y = 1 to 3 : for x = 1 to 3
    a(x, y) = c(x, y) // Copy
    print a(x, y); // Draw
  next : print : next : print
end fn

fn seed
fn nextGen
fn nextGen

handleevents // Go into Mac event loop
