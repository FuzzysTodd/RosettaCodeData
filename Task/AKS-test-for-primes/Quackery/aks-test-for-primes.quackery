  [ dup 0 peek swap
    [] 0 rot 0 join
    witheach
      [ abs tuck +
        rot join swap ]
    drop
    [] swap witheach
      [ rot negate
        dup dip unrot
        * join ]
    nip ]               is nextcoeffs ( [ --> [ )

   [ ' [ 1 ] swap
     times nextcoeffs ] is coeffs     ( n --> [ )

  [ dup 2 < iff
      [ drop false ]
      done
    true swap
    dup coeffs
    behead drop
    -1 split drop
   witheach
     [ over mod
       0 != if
         [ dip not
           conclude ] ]
   drop ]               is prime      ( n --> b )

  [ behead
    0 < iff
      [ say "-" ]
    else sp
    dup size
    dup 0 = iff
      [ 1 echo 2drop ]
      done
    say "x"
    dup 1 = iff
      [ 2drop
        say " + 1" ]
      done
    say "^"
    echo
    witheach
      [ dup 0 < iff
          [ say " - " ]
        else
          [ say " + " ]
        abs echo
        i 0 = if done
        say "x"
        i 1 = if done
        say "^"
        i echo ] ]      is echocoeffs ( [ -->   )

  8 times
    [ i^ echo
      say ": "
      i^ coeffs
      echocoeffs
      cr ]
  cr
  50 times
    [ i^ prime if
      [ i^ echo sp ] ]
