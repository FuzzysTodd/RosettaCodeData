include xpllib; \for PerpDist and Print

func RDP(Points, Size, Epsilon, RemPoints);
\Reduce array Points using Ramer-Douglas-Peucker algorithm
\Return array of remaining points in RemPoints and its size
real Points; int Size; real Epsilon, RemPoints;
real Dist, DistMax;
int  Index, I, Size1, Size2;
[\Find Index of point farthest from line between first and last points
DistMax:= 0.;  Index:= 0;
for I:= 1 to Size-2 do
    [Dist:= PerpDist(Points(I), Points(0), Points(Size-1));
    if Dist > DistMax then
        [DistMax:= Dist;
        Index:= I;
        ];
    ];
if DistMax <= Epsilon then \replace in-between points with first and last points
    [RemPoints(0):= Points(0);
     RemPoints(1):= Points(Size-1);
    return 2;
    ]
else                                    \recursively check sub-line-segments
    [Size1:= RDP(Points, Index+1, Epsilon, RemPoints);
    RemPoints:= @RemPoints(Size1-1);    \add retained points to array
    Size2:= RDP(@Points(Index), Size-Index, Epsilon, RemPoints);
    return Size1 + Size2 - 1;           \for point at Index
    ];
];

real Points, RemPoints;
int  Size, I;
[Points:= [ [0.0, 0.0], [1.0, 0.1], [2.0, -0.1], [3.0, 5.0], [4.0, 6.0],
            [5.0, 7.0], [6.0, 8.1], [7.0,  9.0], [8.0, 9.0], [9.0, 9.0] ];
Size:= 10;
RemPoints:= RlRes(Size);
Size:= RDP(Points, Size, 1.0, RemPoints);
for I:= 0 to Size-1 do
    [if I > 0 then Print(", ");
        Print("[%1.1g, %1.1g]", RemPoints(I,0), RemPoints(I,1));
    ];
CrLf(0);
]
