struct vec2{x,y;};
struct line_t{a,b,c;};
struct triangle_calc_t{
  vec2 origin;
  line_t lines[3];
  vec2 vertices[3];
  double area2;
  winding_dir; // +1 if clockwise (positive angle) -1 if negative.
};
//static vec2 dat[3] = {0,-2, -2,2, 4,0};
static vec2 dat[3] = {-3,7, -6,-5, 2,2};
static triangle_calc_t tri;
enum{TRI_OUT=0, TRI_EDGE=1, TRI_INSIDE=2}
(x,y,t,&r,&g,&b)
{
  if (numframes==0)
  {
     precalc_tri( tri, dat);
  }

  d0 = d1 = d2 = 0;
  side = isPointInsideTriangle(x,y,tri,d0,d1,d2);
  if (side == TRI_EDGE) {
    r=255; g=255; b=0;
    return 1;
  }
  else if (side == TRI_INSIDE) {
    if (tri.winding_dir == -1) {
      swap(d0,d1);
    }
    factor = 255;
    div = tri.winding_dir * tri.area2;
    r = factor*( d1 / div);
    g = factor*( d2 / div);
    b = factor*( d0 / div);
    return 1;
  }
  r=0; g=0; b=0; return 0; // Set color to 0 if outside.
}

precalc_tri(triangle_calc_t t, vec2 verts[3]) {
  t.origin = verts[0];
  for(i=0; i<3; i++) {
    t.vertices[i].x = verts[i].x + t.origin.x;
    t.vertices[i].y = verts[i].y + t.origin.y;
  }
  makeLine(t.lines[0], t.vertices[0], t.vertices[1]);
  makeLine(t.lines[1], t.vertices[1], t.vertices[2]);
  makeLine(t.lines[2], t.vertices[2], t.vertices[0]);
  t.area2 = areaTriangleX2(t.vertices[0], t.vertices[1], t.vertices[2]);
  t.winding_dir = sgn(tri.area2);
}
areaTriangleX2(vec2 a, vec2 b, vec2 c) { // Same as the determinant, but dont div by 2
  s = c.x*(a.y-b.y)+a.x*(b.y-c.y)+b.x*(-a.y+c.y);
}
isPointInsideTriangle(x,y, triangle_calc_t t, &d0,&d1,&d2) {
  vec2 p = {x + t.origin.x, y + t.origin.y };
  d0 = t.winding_dir * lineDist( t.lines[0], p.x, p.y);
  if (d0==0) { return TRI_EDGE; }else if ( sgn(d0) < 0 ) return TRI_OUT;

  d1 = t.winding_dir * lineDist( t.lines[1], p.x, p.y);
  if (d1==0) { return TRI_EDGE; } else if ( sgn(d1) < 0 ) return TRI_OUT;

  d2 = t.winding_dir * lineDist( t.lines[2], p.x, p.y);
  if (d2==0) { return TRI_EDGE; } else if ( sgn(d2) < 0 ) return TRI_OUT;

  return TRI_INSIDE; // on inside
}

makeLine(line_t line, vec2 a, vec2 b) { // -dy,dx,axby-aybx
  line.a = -(b.y - a.y);
  line.b = (b.x - a.x);
  line.c = a.x*b.y - a.y*b.x;
}
lineDist(line_t line, x,y) {
  x*line.a + y*line.b + line.c;
}
swap(&a,&b) {tmp = a; a=b; b=tmp; }
