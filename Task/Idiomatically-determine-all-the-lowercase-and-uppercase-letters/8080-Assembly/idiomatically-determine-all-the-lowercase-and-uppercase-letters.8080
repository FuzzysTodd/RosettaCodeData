	;------------------------------------------------------
	; useful equates
	;------------------------------------------------------
bdos	equ	    5h	    ; BDOS entry
wboot   equ     0       ; BDOS warm boot function
conout  equ     2       ; BDOS write character to console function
prtstr  equ     9       ; BDOS write string to console function
cr      equ     13      ; ASCII carriage return
lf      equ     10      ; ASCII line feed
	;------------------------------------------------------
	; main code begins here
	;------------------------------------------------------
	org	100h		; entry point under CP/M
	lxi	sp,stack	; set a local stack
	;
	;  show upper case alphabet
	;
	lxi	d,ucmsg
	call	message
  	mvi	a,'A'
ucloop:	push	a
	call	putchr
	pop	a
	inr	a
	cpi	'Z'+1
	jc	ucloop
	call	crlf
	;
	;  show lower case alphabet
	;
	lxi	d,lcmsg
	call	message
	mvi	a,'a'
lcloop:	push	a
	call	putchr
	pop	a
	inr	a
	cpi	'z'+1
	jc	lcloop
	call	crlf
	;
	;  we're finished; exit to operating system
	;
	jmp	wboot
	;-------------------------------------------------------
	; console output of $-terminated string pointed to by DE
	;-------------------------------------------------------
message:
	push	b
	push	d
	push	h
	mvi	    c,prtstr
	call	bdos
	pop	    h
	pop	    d
	pop	    b
	ret
	;-------------------------------------------------------
	; output CRLF to console
	;-------------------------------------------------------
crlf:	push 	b
	push 	d
	push	h
	mvi	    e,cr
	mvi	    c,conout
	call	bdos
	mvi	    e,lf
	mvi	    c,conout
	call	bdos
	pop	    h
	pop	    d
	pop	    b
	ret
	;-------------------------------------------------------
	; console output of char in A register
	;-------------------------------------------------------
putchr:	push	b
	push	d
	push	h
	mov	    e,a
	mvi	    c,conout
	call	bdos
	pop	    h
	pop	    d
	pop	    b
	ret
	;------------------------------------------------------
	; messages and data area
	;------------------------------------------------------
ucmsg:	db	'Upper case: $'
lcmsg:	db	'Lower case: $'
stack	equ	$+128		; 64-level stack is sufficient
	;
	end
