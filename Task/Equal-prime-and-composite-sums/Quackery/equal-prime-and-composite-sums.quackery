  [ swap number$
    tuck size -
    space swap of
    swap join echo$ ]         is r-echo      ( n n --> $ )

  [ stack ]                   is primecount  (     --> s )
  [ stack ]                   is recentprime (     --> s )
  [ stack ]                   is primesum    (     --> s )
  [ stack ]                   is compcount   (     --> s )
  [ stack ]                   is recentcomp  (     --> s )
  [ stack ]                   is compsum     (     --> s )

  [ recentprime take
    [ 1+ dup isprime iff
        [ 1 primecount tally
          dup recentprime put
          primesum tally ]
        done
     again ] ]                is nextprime   (     -->   )

  [ recentcomp take
    [ 1+ dup isprime not iff
        [ 1 compcount tally
          dup recentcomp put
          compsum tally ]
        done
     again ] ]                is nextcomp    (     -->   )

  1 primecount  put
  2 recentprime put
  2 primesum    put
  1 compcount   put
  4 recentcomp  put
  4 compsum     put
  []
  [ primesum share
    compsum  share
    2dup > iff
      [ 2drop nextcomp ]
      again
    < iff nextprime again
    compsum    share
    primecount share
    compcount  share
    join join nested join
    dup size 7 < while
    nextcomp
    nextprime
    again ]
   primecount  release
   recentprime release
   primesum    release
   compcount   release
   recentcomp  release
   compsum     release
   say "        sum      prime  composite" cr
   witheach
     [ witheach
         [ 11 r-echo ]
       cr ]
