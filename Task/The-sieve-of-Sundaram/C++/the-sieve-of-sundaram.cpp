#include <cmath>
#include <cstdint>
#include <iomanip>
#include <iostream>
#include <vector>

std::vector<uint32_t> sieve_of_sundaram(const uint32_t& limit) {
	std::vector<uint32_t> primes = {};
	if ( limit < 3 ) {
		return primes;
	}

	const uint32_t k = ( limit - 3 ) / 2 + 1;
	std::vector<bool> marked(k, true);
	for ( uint32_t i = 0; i < ( std::sqrt(limit) - 3 ) / 2 + 1; ++i ) {
		uint32_t p = 2 * i + 3;
		uint32_t s = ( p * p - 3 ) / 2;
		for ( uint32_t j = s; j < k; j += p ) {
			marked[j] = false;
		}
	}

	for ( uint32_t i = 0; i < k; ++i ) {
		if ( marked[i] ) {
			primes.emplace_back(2 * i + 3);
		}
	}
	return primes;
}

int main() {
	std::vector<uint32_t> primes = sieve_of_sundaram(16'000'000);
	std::cout << "The first 100 odd primes generated by the Sieve of Sundaram:" << std::endl;
	for ( uint32_t i = 0; i < 100; ++i ) {
		std::cout << std::setw(3) << primes[i] << ( i % 10 == 9 ? "\n" :" " );
	}
	std::cout << "\n" << "The 1_000_000th Sundaram prime is " << primes[1'000'000 - 1] << std::endl;
}
