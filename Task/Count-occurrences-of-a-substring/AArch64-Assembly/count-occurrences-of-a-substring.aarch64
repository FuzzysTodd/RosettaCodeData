/* ARM assembly AARCH64 Raspberry PI 3B */
/*  program strcptsub64.s   */

/************************************/
/* Constantes                       */
/************************************/
/* for this file see task include a file in language AArch64 assembly*/
.include "../includeConstantesARM64.inc"

/************************************/
/* Initialized data                 */
/************************************/
.data
szMessResult:         .asciz "Result: "
szString:             .asciz "the three truths"
szSubString:          .asciz "th"
szString1:             .asciz "ababababab"
szSubString1:          .asciz "abab"
szCarriageReturn:     .asciz "\n"
szMessStart:          .asciz "Program 64 bits start.\n"
/************************************/
/* UnInitialized data               */
/************************************/
.bss
sZoneConv:            .skip 24
/************************************/
/*  code section                    */
/************************************/
.text
.global main
main:                      // entry of program
    ldr x0,qAdrszMessStart
    bl affichageMess
    ldr x0,qAdrszString
    ldr x1,qAdrszSubString
    bl countSubString
    ldr x0,qAdrszString1
    ldr x1,qAdrszSubString1
    bl countSubString

100:                       // standard end of the program
    mov x0, #0             // return code
    mov x8, #EXIT          // request to exit program
    svc 0                  // perform the system call
qAdrszString:             .quad  szString
qAdrszSubString:          .quad  szSubString
qAdrszString1:            .quad  szString1
qAdrszSubString1:         .quad  szSubString1
qAdrsZoneConv:            .quad  sZoneConv
qAdrszMessResult:         .quad  szMessResult
qAdrszCarriageReturn:     .quad  szCarriageReturn
qAdrszMessStart:          .quad  szMessStart
/***************************************************/
/*   count sub string of string                    */
/***************************************************/
/* r0 contains a string */
/* r1 contains a substring */
/* r0 return substring count */
countSubString:
    stp x1,lr,[sp,-16]!
    stp x2,x3,[sp,-16]!
    stp x4,x5,[sp,-16]!
    stp x6,x7,[sp,-16]!
    mov x4,#0            // counter
    mov x3,#0            // index string
    mov x5,#0            // index substring
1:
    ldrb w6,[x0,x5]      // load byte of string
    ldrb w7,[x1,x3]      // load byte of substring
    cmp x6,x7            // compare byte
    bne 2f               // not equal
    cmp x6,#0            // string end ?
    beq 3f               // yes
    add x5,x5,#1         // else increment index
    add x3,x3,#1
    b 1b                 // and loop
2:                       // characters not equal
    cmp x6,#0            // end string ?
    beq 4f
    cmp x7,#0            // end substring ?
    add x6,x4,1
    csel x4,x6,x4,eq     // yes -> increment counter
    mov x3,#0            // raz index substring
    add x5,x5,#1         // increment string index
    b 1b                 // and loop
3:                       // end string and end substring
    add x4,x4,#1         // increment counter
4:                       // result display
    mov x0,x4
    ldr x1,qAdrsZoneConv
    bl conversion10
    ldr x0,qAdrszMessResult
    bl affichageMess
    ldr x0,qAdrsZoneConv
    bl affichageMess
    ldr x0,qAdrszCarriageReturn
    bl affichageMess

    mov x0,x4
 100:
    ldp x6,x7,[sp],16
    ldp x4,x5,[sp],16
    ldp x2,x3,[sp],16
    ldp x1,lr,[sp],16
    ret
/***************************************************/
/*      ROUTINES INCLUDE                           */
/***************************************************/
/* for this file see task include a file in language AArch64 assembly*/
.include "../includeARM64.inc"
