/* ARM assembly AARCH64 Raspberry PI 3B */
/*  program jewels64.s   */

/************************************/
/* Constantes                       */
/************************************/
/* for this file see task include a file in language AArch64 assembly*/
.include "../includeConstantesARM64.inc"

/************************************/
/* Initialized data                 */
/************************************/
.data
szMessResult:         .asciz "Result: "
szStone1:             .asciz "aAAbbbb"
szJewels1:            .asciz "aA"
szStone2:             .asciz "ZZ"
szJewels2:            .asciz "z"
szCarriageReturn:     .asciz "\n"
szMessStart:          .asciz "Program 64 bits start.\n"
/************************************/
/* UnInitialized data               */
/************************************/
.bss
sZoneConv:            .skip 24
/************************************/
/*  code section                    */
/************************************/
.text
.global main
main:                      // entry of program
    ldr x0,qAdrszMessStart
    bl affichageMess

    ldr x0,qAdrszStone1
    ldr x1,qAdrszJewels1
    bl countJewels
    ldr x0,qAdrszStone2
    ldr x1,qAdrszJewels2
    bl countJewels

100:                       // standard end of the program
    mov x0, #0             // return code
    mov x8, #EXIT          // request to exit program
    svc 0                  // perform the system call
qAdrszStone1:             .quad  szStone1
qAdrszJewels1:            .quad  szJewels1
qAdrszStone2:             .quad  szStone2
qAdrszJewels2:            .quad  szJewels2
qAdrsZoneConv:            .quad  sZoneConv
qAdrszMessResult:         .quad  szMessResult
qAdrszCarriageReturn:     .quad  szCarriageReturn
qAdrszMessStart:          .quad  szMessStart
/***************************************************/
/*   count jewels in stone                   */
/***************************************************/
/* r0 contains stone address */
/* r1 contains jewels address */
/* r0 return jewels count */
countJewels:
    stp x1,lr,[sp,-16]!
    stp x2,x3,[sp,-16]!
    stp x4,x5,[sp,-16]!
    stp x6,x7,[sp,-16]!
    mov x4,#0            // counter
    mov x3,#0            // index stone
1:
    ldrb w6,[x0,x3]      // load byte of stone
    cmp x6,#0            // end stone ?
    beq 3f
    mov x5,#0            // index jewels
2:
    ldrb w2,[x1,x5]      // load byte of jewels
    cmp x2,#0            // end jewels ?
    cinc x3,x3,eq        // yes -> increment index stone
    beq 1b               // and loop
    cmp x6,x2            // compare byte
    cinc x5,x5,ne        // not equal -> increment jewels index
    bne 2b               // and loop
    add x4,x4,#1         // else increment counter
    add x3,x3,#1         // incremente index stone
    b 1b                 // and loop

3:                       // result display
    mov x0,x4
    ldr x1,qAdrsZoneConv
    bl conversion10
    ldr x0,qAdrszMessResult
    bl affichageMess
    ldr x0,qAdrsZoneConv
    bl affichageMess
    ldr x0,qAdrszCarriageReturn
    bl affichageMess

    mov x0,x4
 100:
    ldp x6,x7,[sp],16
    ldp x4,x5,[sp],16
    ldp x2,x3,[sp],16
    ldp x1,lr,[sp],16
    ret
/***************************************************/
/*      ROUTINES INCLUDE                           */
/***************************************************/
/* for this file see task include a file in language AArch64 assembly*/
.include "../includeARM64.inc"
