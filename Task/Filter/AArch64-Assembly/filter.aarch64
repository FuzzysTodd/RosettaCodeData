/* ARM assembly AARCH64 Raspberry PI 3B */
/*  program filterdes64.s   */

/************************************/
/* Constantes                       */
/************************************/
/* for this file see task include a file in language AArch64 assembly*/
.include "../includeConstantesARM64.inc"

/************************************/
/* Initialized data                 */
/************************************/
.data
szMessResult:        .asciz "Start array : "
szMessResultFil:     .asciz "Filter array : "
szMessResultdest:    .asciz "Same array : "
szMessStart:         .asciz "Program 64 bits start.\n"
szCarriageReturn:    .asciz "\n"
szFiller:            .asciz "  "
.align 4
arrayNumber:         .quad  1,2,3,4,5,6,7,8,9,10
.equ LGARRAY,   (. - arrayNumber) / 8
/************************************/
/* UnInitialized data               */
/************************************/
.bss
.align 4
arrayNumberFil:           .skip 8 * LGARRAY  // result array
sZoneConv:                .skip 24
/************************************/
/*  code section                    */
/************************************/
.text
.global main
main:
    ldr x0,qAdrszMessStart      // display start message
    bl affichageMess
    ldr x0,qAdrszMessResult     // display message
    bl affichageMess
    ldr x5,qAdrarrayNumber      // start array address
    mov x4,#0                   // index

1:
    ldr x0,[x5,x4,lsl #3]       // load a value
    ldr x1,qAdrsZoneConv
    bl conversion10             // dÃ©cimal conversion
    ldr x0,qAdrsZoneConv
    bl affichageMess            // display value
    ldr x0,qAdrszFiller
    bl affichageMess
    add x4,x4,#1                // increment index
    cmp x4,#LGARRAY             // end array ?
    blt 1b                      // no -> loop
    ldr x0,qAdrszCarriageReturn
    bl affichageMess

    ldr x6,qAdrarrayNumberFil   // adrress result array
    mov x4,#0                   // index
    mov x3,#0                   // index result
2:
    ldr x0,[x5,x4,lsl #3]       // load a value
    tst x0,#1                   // odd ?
    bne 3f
    str x0,[x6,x3,lsl #3]       // no -> store in result array
    add x3,x3,#1                // and increment result index
3:
    add x4,x4,#1                // increment array index
    cmp x4,#LGARRAY             // end ?
    blt 2b                      // no -> loop

    ldr x0,qAdrszMessResultFil
    bl affichageMess
    mov x4,#0                   // init index

4:                              // display filter result array
    ldr x0,[x6,x4,lsl #3]
    ldr x1,qAdrsZoneConv
    bl conversion10
    ldr x0,qAdrsZoneConv
    bl affichageMess
    ldr x0,qAdrszFiller
    bl affichageMess
    add x4,x4,#1
    cmp x4,x3
    blt 4b
    ldr x0,qAdrszCarriageReturn
    bl affichageMess

                                // array destruction
    mov x4,#0                   // index
    mov x3,#0                   // index result
5:
    ldr x0,[x5,x4,lsl #3]       // load a value
    tst x0,#1                   // odd ?
    bne 7f
    cmp x3,x4                   // index =  no store
    beq 6f
    str x0,[x5,x3,lsl #3]       // store in free item on same array
6:
    add x3,x3,#1                // and increment result index
7:
    add x4,x4,#1                // increment array index
    cmp x4,#LGARRAY             // end ?
    blt 5b                      // no -> loop

    ldr x0,qAdrszMessResultdest
    bl affichageMess
    mov x4,#0                   // init index

8:                              // display array
    ldr x0,[x5,x4,lsl #3]
    ldr x1,qAdrsZoneConv
    bl conversion10
    ldr x0,qAdrsZoneConv
    bl affichageMess
    ldr x0,qAdrszFiller
    bl affichageMess
    add x4,x4,#1
    cmp x4,x3
    blt 8b
    ldr x0,qAdrszCarriageReturn
    bl affichageMess


100:                             // standard end of the program
    mov x0, #0                   // return code
    mov x8, #EXIT                // request to exit program
    svc 0                        // perform the system call
qAdrszCarriageReturn:    .quad  szCarriageReturn
qAdrszMessStart:         .quad  szMessStart
qAdrarrayNumber:         .quad  arrayNumber
qAdrszMessResult:        .quad  szMessResult
qAdrarrayNumberFil:      .quad  arrayNumberFil
qAdrszMessResultFil:     .quad  szMessResultFil
qAdrszMessResultdest:    .quad  szMessResultdest
qAdrsZoneConv:           .quad  sZoneConv
qAdrszFiller:            .quad  szFiller
/***************************************************/
/*      ROUTINES INCLUDE                           */
/***************************************************/
/* for this file see task include a file in language AArch64 assembly*/
.include "../includeARM64.inc"
