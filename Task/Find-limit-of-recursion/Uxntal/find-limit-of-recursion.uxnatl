|00 @System &vector $2 &expansion $2 &wst $1 &rst $1 &metadata $2 &r $2 &g $2 &b $2 &debug $1 &state $1
|10 @Console &vector $2 &read $1 &pad $4 &type $1 &write $1 &error $1

|00 @calls $1

|0100
    #01
    &loop
        DUP .calls STZ
        recurse
        INC !&loop

@recurse
    ( keep calling recurse until stack value is 00 )
    #01 SUB DUP #00 EQU ?&done

    recurse

    ( as we walk back up the stack, increment counter )
    &done INC

    ( if we go above the original call count, the stack was corrupted )
    DUP .calls LDZ GTH ?&fail
JMP2r

&fail
    ;msg1 print-str
    .calls LDZ print-hex
    ;msg2 print-str
    #80 .System/state DEO BRK

@print-str
    &loop
        LDAk .Console/write DEO
        INC2 LDAk ?&loop
    POP2
JMP2r

@print-hex
    DUP #04 SFT print-digit #0f AND print-digit
JMP2r

@print-digit
    DUP #09 GTH #27 MUL ADD #30 ADD .Console/write DEO
JMP2r

@msg1 "Stack 20 "overflow 20 "at 20 "# 00
@msg2 20 "calls. 0a00
