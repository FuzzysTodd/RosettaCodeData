get "libhdr"

let sieve(n, prime) be
$(  let i = 2
    0!prime := false
    1!prime := false
    for i = 2 to n do i!prime := true
    while i*i <= n
    $(  let j = i*i
        while j <= n
        $(  j!prime := false
            j := j+i
        $)
        i := i+1
    $)
$)

let partition(x, n, prime, p, part) =
    p > x -> false,
    n = 1 -> valof $( !part := x; resultis x!prime $),
    valof
    $(  p := p+1 repeatuntil p!prime
        !part := p
        if partition(x-p, n-1, prime, p, part+1) resultis true
        resultis partition(x, n, prime, p, part)
    $)

let showpart(n, part) be
$(  writef("%N", !part)
    unless n=1 do
    $(  wrch('+')
        showpart(n-1, part+1)
    $)
$)

let show(x, n, prime) be
$(  let part = vec 32
    writef("Partitioned %N with %N prime%S: ", x, n, n=1->"", "s")
    test partition(x, n, prime, 1, part)
        do showpart(n, part)
        or writes("not possible")
    newline()
$)

let start() be
$(  let prime = getvec(100000)

    let tests = table 99809,1, 18,2, 19,3, 20,4, 2017,24,
                      22699,1, 22699,2, 22699,3, 22699,4, 40355,3

    sieve(100000, prime)
    for t = 0 to 9 do show(tests!(t*2), tests!(t*2+1), prime)
    freevec(prime)
$)
