isqrt = proc (s: int) returns (int)
    x0: int := s/2
    if x0 = 0 then return(s) end
    x1: int := (x0 + s/x0) / 2
    while x1 < x0 do
        x0, x1 := x1, (x0 + s/x0) / 2
    end
    return(x0)
end isqrt

primes = proc (n: int) returns (sequence[int])
    prime: array[bool] := array[bool]$fill(1, n, true)
    prime[1] := false
    for p: int in int$from_to(2, isqrt(n)) do
        for c: int in int$from_to_by(p*p, n, p) do
            prime[c] := false
        end
    end

    pr: array[int] := array[int]$predict(1, n)
    for p: int in array[bool]$indexes(prime) do
        if prime[p] then array[int]$addh(pr, p) end
    end

    return(sequence[int]$a2s(pr))
end primes

partition_sum = proc (x, n: int, nums: sequence[int])
                returns (sequence[int])
                signals (impossible)
    if n<=0 cor sequence[int]$empty(nums) then signal impossible end

    if n=1 then
        for k: int in sequence[int]$elements(nums) do
            if x=k then return(sequence[int]$[x]) end
        end
        signal impossible
    end

    k: int := sequence[int]$bottom(nums)
    rest: sequence[int] := sequence[int]$reml(nums)

    return(sequence[int]$addl(partition_sum(x-k, n-1, rest), k))
    except when impossible:
        return(partition_sum(x, n, rest))
        resignal impossible
    end
end partition_sum

prime_partition = proc (x, n: int)
                  returns (sequence[int])
                  signals (impossible)
    return(partition_sum(x, n, primes(x))) resignal impossible
end prime_partition

format_sum = proc (nums: sequence[int]) returns (string)
    result: string := ""
    for n: int in sequence[int]$elements(nums) do
        result := result || "+" || int$unparse(n)
    end
    return(string$rest(result, 2))
end format_sum

start_up = proc ()
    test = struct[x: int, n: int]
    tests: sequence[test] := sequence[test]$[
        test${x:99809,n:1}, test${x:18,n:2}, test${x:19,n:3}, test${x:20,n:4},
        test${x:2017,n:24}, test${x:22699,n:1}, test${x:22699,n:2},
        test${x:22699,n:3}, test${x:22699,n:4}, test${x:40355,n:3}
    ]

    po: stream := stream$primary_output()
    for t: test in sequence[test]$elements(tests) do
        stream$puts(po, "Partitioned " || int$unparse(t.x) || " with "
                    || int$unparse(t.n) || " primes: ")
        stream$putl(po, format_sum(prime_partition(t.x, t.n)))
        except when impossible:
            stream$putl(po, "not possible.")
        end
    end
end start_up
